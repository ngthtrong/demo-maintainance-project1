import React, { useState } from 'react';
import './GitHubActionsDemo.css';

const GitHubActionsDemo = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [workflowStatus, setWorkflowStatus] = useState('pending'); // pending, running, success, failed
  const [showWorkflowFile, setShowWorkflowFile] = useState(false);

  const steps = [
    {
      title: "Thi·∫øt l·∫≠p Workflow",
      description: "T·∫°o file workflow CI/CD trong repository",
      explanation: "T·∫°o file .github/workflows/ci.yml ƒë·ªÉ ƒë·ªãnh nghƒ©a quy tr√¨nh t·ª± ƒë·ªông h√≥a. Workflow n√†y s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t m·ªói khi c√≥ Pull Request nh·∫Øm v√†o nh√°nh main ho·∫∑c develop.",
      highlight: "File workflow ƒë·ªãnh nghƒ©a c√°c b∆∞·ªõc t·ª± ƒë·ªông: checkout code, setup Node.js, install dependencies, v√† run tests."
    },
    {
      title: "L·∫≠p tr√¨nh vi√™n t·∫°o Pull Request",
      description: "Tri·∫øt t·∫°o nh√°nh m·ªõi, s·ª≠a l·ªói v√† t·∫°o PR",
      explanation: "L·∫≠p tr√¨nh vi√™n t·∫°o nh√°nh m·ªõi ƒë·ªÉ s·ª≠a l·ªói, commit thay ƒë·ªïi v√† ƒë·∫©y l√™n GitHub. Sau ƒë√≥ t·∫°o Pull Request t·ª´ nh√°nh c·ªßa m√¨nh v√†o nh√°nh develop.",
      highlight: "Pull Request k√≠ch ho·∫°t t·ª± ƒë·ªông workflow GitHub Actions."
    },
    {
      title: "GitHub Actions t·ª± ƒë·ªông th·ª±c thi",
      description: "Workflow t·ª± ƒë·ªông ch·∫°y khi c√≥ PR m·ªõi",
      explanation: "GitHub t·ª± ƒë·ªông ph√°t hi·ªán Pull Request v√† k√≠ch ho·∫°t workflow. Tr√™n trang PR, m·ª•c 'Checks' xu·∫•t hi·ªán ƒë·ªÉ hi·ªÉn th·ªã ti·∫øn tr√¨nh ch·∫°y workflow.",
      highlight: "GitHub Actions th·ª±c hi·ªán tu·∫ßn t·ª±: checkout code ‚Üí setup Node.js ‚Üí install dependencies ‚Üí run tests."
    },
    {
      title: "Xem k·∫øt qu·∫£ v√† ra quy·∫øt ƒë·ªãnh",
      description: "D·ª±a tr√™n k·∫øt qu·∫£ tests ƒë·ªÉ quy·∫øt ƒë·ªãnh merge",
      explanation: "N·∫øu tests th√†nh c√¥ng, hi·ªÉn th·ªã d·∫•u tick xanh v√† c√≥ th·ªÉ merge. N·∫øu th·∫•t b·∫°i, hi·ªÉn th·ªã d·∫•u X ƒë·ªè v√† c·∫ßn s·ª≠a l·ªói tr∆∞·ªõc khi merge.",
      highlight: "GitHub Actions ƒë√≥ng vai tr√≤ 'ng∆∞·ªùi g√°c c·ªïng' ch·∫•t l∆∞·ª£ng t·ª± ƒë·ªông."
    }
  ];

  const workflowCode = `# .github/workflows/ci.yml
name: Node.js CI

# K√≠ch ho·∫°t workflow khi c√≥ Pull Request v√†o nh√°nh main ho·∫∑c develop
on:
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-and-test:
    # S·ª≠ d·ª•ng m√°y ·∫£o Ubuntu m·ªõi nh·∫•t ƒë·ªÉ ch·∫°y
    runs-on: ubuntu-latest

    steps:
      # B∆∞·ªõc 1: L·∫•y m√£ ngu·ªìn c·ªßa Pull Request v·ªÅ m√°y ·∫£o
      - name: Checkout repository code
        uses: actions/checkout@v3

      # B∆∞·ªõc 2: C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng Node.js phi√™n b·∫£n 18
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      # B∆∞·ªõc 3: C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt c·ªßa d·ª± √°n
      - name: Install dependencies
        run: npm install

      # B∆∞·ªõc 4: Ch·∫°y c√°c b√†i ki·ªÉm th·ª≠ t·ª± ƒë·ªông
      - name: Run tests
        run: npm test`;

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const goToStep = (stepIndex) => {
    setCurrentStep(stepIndex);
  };

  const toggleWorkflowFile = () => {
    setShowWorkflowFile(!showWorkflowFile);
  };

  const simulateWorkflow = (status) => {
    setWorkflowStatus('running');
    setTimeout(() => {
      setWorkflowStatus(status);
    }, 2000);
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'running':
        return 'üü°';
      case 'success':
        return '‚úÖ';
      case 'failed':
        return '‚ùå';
      default:
        return '‚è≥';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'running':
        return 'ƒêang ch·∫°y...';
      case 'success':
        return 'T·∫•t c·∫£ tests ƒë√£ th√†nh c√¥ng';
      case 'failed':
        return 'M·ªôt s·ªë tests ƒë√£ th·∫•t b·∫°i';
      default:
        return 'Ch·ªù ch·∫°y workflow';
    }
  };

  return (
    <div className="github-actions-demo">
      <header className="demo-header">
        <h1>Demo 5: T·ª± ƒë·ªông Ki·ªÉm tra Ch·∫•t l∆∞·ª£ng Code v·ªõi GitHub Actions</h1>
        <p className="demo-scenario">
          <strong>T√¨nh hu·ªëng:</strong> Nh√≥m ph√°t tri·ªÉn quy ƒë·ªãnh m·ªçi thay ƒë·ªïi ƒë∆∞·ª£c ƒë∆∞a v√†o nh√°nh develop 
          ph·∫£i v∆∞·ª£t qua t·∫•t c·∫£ c√°c b√†i ki·ªÉm th·ª≠ ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng g√¢y ra l·ªói h·ªìi quy. 
          S·ª≠ d·ª•ng GitHub Actions ƒë·ªÉ t·ª± ƒë·ªông h√≥a quy tr√¨nh n√†y.
        </p>
      </header>

      <div className="demo-content">
        <div className="step-navigator">
          <h3>C√°c b∆∞·ªõc th·ª±c hi·ªán:</h3>
          <div className="step-buttons">
            {steps.map((step, index) => (
              <button
                key={index}
                className={`step-btn ${currentStep === index ? 'active' : ''} ${currentStep > index ? 'completed' : ''}`}
                onClick={() => goToStep(index)}
              >
                {index + 1}
              </button>
            ))}
          </div>
        </div>

        <div className="step-content">
          <div className="step-header">
            <h2>B∆∞·ªõc {currentStep + 1}: {steps[currentStep].title}</h2>
            <p>{steps[currentStep].description}</p>
          </div>

          {currentStep === 0 && (
            <div className="workflow-section">
              <h4>N·ªôi dung file CI Workflow:</h4>
              <div className="workflow-file">
                <div className="file-header">
                  <span className="file-name">.github/workflows/ci.yml</span>
                  <button className="toggle-btn" onClick={toggleWorkflowFile}>
                    {showWorkflowFile ? '·∫®n code' : 'Hi·ªán code'}
                  </button>
                </div>
                
                {showWorkflowFile && (
                  <div className="workflow-content">
                    <pre className="workflow-code">
                      <code>{workflowCode}</code>
                    </pre>
                  </div>
                )}
              </div>
            </div>
          )}

          {currentStep === 2 && (
            <div className="workflow-demo">
              <h4>M√¥ ph·ªèng GitHub Actions:</h4>
              <div className="workflow-controls">
                <button 
                  className="simulate-btn success"
                  onClick={() => simulateWorkflow('success')}
                >
                  M√¥ ph·ªèng Tests Th√†nh c√¥ng
                </button>
                <button 
                  className="simulate-btn failed"
                  onClick={() => simulateWorkflow('failed')}
                >
                  M√¥ ph·ªèng Tests Th·∫•t b·∫°i
                </button>
              </div>
              
              <div className="workflow-status">
                <div className="status-item">
                  <span className="status-icon">{getStatusIcon(workflowStatus)}</span>
                  <span className="status-text">{getStatusText(workflowStatus)}</span>
                </div>
                
                {workflowStatus === 'running' && (
                  <div className="progress-bar">
                    <div className="progress-fill"></div>
                  </div>
                )}
              </div>
            </div>
          )}

          <div className="explanation-section">
            <h4>Gi·∫£i th√≠ch:</h4>
            <p>{steps[currentStep].explanation}</p>
          </div>

          {steps[currentStep].highlight && (
            <div className="highlight-note">
              <h4>üéØ ƒêi·ªÉm ch√∫ √Ω:</h4>
              <p>{steps[currentStep].highlight}</p>
            </div>
          )}
        </div>

        <div className="step-controls">
          <button 
            className="nav-btn prev-btn" 
            onClick={prevStep} 
            disabled={currentStep === 0}
          >
            ‚Üê B∆∞·ªõc tr∆∞·ªõc
          </button>
          <span className="step-indicator">
            {currentStep + 1} / {steps.length}
          </span>
          <button 
            className="nav-btn next-btn" 
            onClick={nextStep} 
            disabled={currentStep === steps.length - 1}
          >
            B∆∞·ªõc ti·∫øp theo ‚Üí
          </button>
        </div>
      </div>

      <div className="github-interface">
        <h3>Giao di·ªán Pull Request tr√™n GitHub</h3>
        <div className="github-mockup">
          <div className="github-header">
            <div className="pr-title">
              <h4>Fix login validation bug</h4>
              <span className="pr-number">#123</span>
            </div>
            <div className="pr-status open">Open</div>
          </div>
          
          <div className="github-content">
            <div className="pr-description">
              <p>Fixed the login validation logic that was causing users to be unable to log in with valid credentials.</p>
            </div>
            
            <div className="checks-section">
              <h5>Checks</h5>
              <div className="check-item">
                <span className="check-icon">{getStatusIcon(workflowStatus)}</span>
                <span className="check-name">Node.js CI</span>
                <span className="check-status">{getStatusText(workflowStatus)}</span>
                {workflowStatus !== 'pending' && (
                  <button className="details-btn">Details</button>
                )}
              </div>
            </div>
            
            <div className="merge-section">
              <button 
                className={`merge-btn ${workflowStatus === 'success' ? 'enabled' : 'disabled'}`}
                disabled={workflowStatus !== 'success'}
              >
                {workflowStatus === 'success' ? 'Merge pull request' : 'Merge blocked'}
              </button>
              {workflowStatus === 'failed' && (
                <p className="merge-blocked">
                  Merge blocked by failing checks. Fix the issues and try again.
                </p>
              )}
            </div>
          </div>
        </div>
        <p className="github-description">
          H√¨nh 5.5: K·∫øt qu·∫£ ki·ªÉm tra t·ª± ƒë·ªông c·ªßa GitHub Actions tr√™n m·ªôt Pull Request. 
          N√∫t merge ch·ªâ ƒë∆∞·ª£c k√≠ch ho·∫°t khi t·∫•t c·∫£ checks ƒë√£ th√†nh c√¥ng.
        </p>
      </div>

      <div className="benefits-section">
        <h3>L·ª£i √≠ch c·ªßa GitHub Actions trong b·∫£o tr√¨</h3>
        <div className="benefits-grid">
          <div className="benefit-item">
            <div className="benefit-icon">üîç</div>
            <h4>Ph√°t hi·ªán l·ªói s·ªõm</h4>
            <p>T√¨m ra l·ªói ngay t·∫°i th·ªùi ƒëi·ªÉm ƒë·ªÅ xu·∫•t thay ƒë·ªïi, kh√¥ng ƒë·ªÉ l·ªçt v√†o nh√°nh ch√≠nh</p>
          </div>
          <div className="benefit-item">
            <div className="benefit-icon">‚è±Ô∏è</div>
            <h4>Ti·∫øt ki·ªám th·ªùi gian</h4>
            <p>Gi·∫£i ph√≥ng c√°c th√†nh vi√™n kh·ªèi c√¥ng vi·ªác ki·ªÉm tra l·∫∑p ƒëi l·∫∑p l·∫°i</p>
          </div>
          <div className="benefit-item">
            <div className="benefit-icon">üèÜ</div>
            <h4>Th√∫c ƒë·∫©y vƒÉn h√≥a ch·∫•t l∆∞·ª£ng</h4>
            <p>Khuy·∫øn kh√≠ch l·∫≠p tr√¨nh vi√™n vi·∫øt code c·∫©n th·∫≠n v√† c√≥ tr√°ch nhi·ªám h∆°n</p>
          </div>
          <div className="benefit-item">
            <div className="benefit-icon">üõ°Ô∏è</div>
            <h4>B·∫£o v·ªá nh√°nh ch√≠nh</h4>
            <p>NgƒÉn ch·∫∑n code l·ªói ƒë∆∞·ª£c merge v√†o c√°c nh√°nh quan tr·ªçng</p>
          </div>
        </div>
      </div>

      <div className="advanced-features">
        <h3>C√°c t√≠nh nƒÉng n√¢ng cao</h3>
        <div className="features-list">
          <div className="feature-item">
            <h4>üîß Matrix Builds</h4>
            <p>Test tr√™n nhi·ªÅu phi√™n b·∫£n Node.js, h·ªá ƒëi·ªÅu h√†nh kh√°c nhau</p>
          </div>
          <div className="feature-item">
            <h4>üìä Code Coverage</h4>
            <p>T·ª± ƒë·ªông t·∫°o b√°o c√°o ƒë·ªô ph·ªß code v√† comment tr√™n PR</p>
          </div>
          <div className="feature-item">
            <h4>üöÄ Deployment</h4>
            <p>T·ª± ƒë·ªông deploy sau khi merge v√†o nh√°nh main</p>
          </div>
          <div className="feature-item">
            <h4>üîî Notifications</h4>
            <p>G·ª≠i th√¥ng b√°o qua Slack, email khi c√≥ l·ªói</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GitHubActionsDemo;
